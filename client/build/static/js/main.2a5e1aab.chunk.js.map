{"version":3,"sources":["components/video/Video.js","components/session/CreateSession.js","components/session/Session.js","App.js","serviceWorker.js","index.js"],"names":["player","CreateSession","props","history","useHistory","useParams","sessionID","videoUrl","youtubeParser","url","match","length","decodedVideoUrl","decodeURIComponent","videoID","session","push","handleSubmit","Video","useState","setVideoID","currentTime","shouldPause","timestamp","initialVideoState","setInitialVideoState","updateTimeRef","useRef","loadVideo","window","YT","Player","videoId","playerVars","mute","events","onReady","onPlayerReady","onStateChange","useEffect","socket","addEventListener","event","data","JSON","parse","updateVideo","join","latestEvent","action","tag","document","createElement","src","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","videoStatus","getPlayerState","pauseVideo","Date","now","current","playVideo","target","getCurrentTime","changeState","currentStatus","second","currTime","timeDiff","expectedCurrTime","Math","abs","seekTo","stringify","triggered","send","syncPause","className","id","Session","isHttps","location","protocol","startsWith","hostname","WebSocket","sessID","onopen","leader","App","setLeader","setSessionID","setAction","createSession","vidID","leaderbool","path","render","Boolean","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a5e1aab.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./video.scss\";\n\nvar player;\nconst Video = (props) => {\n  const [videoID, setVideoID] = useState(props.videoID);\n  const [initialVideoState, setInitialVideoState] = useState({\n    currentTime: 0,\n    shouldPause: false,\n    timestamp: 0,\n  });\n  const updateTimeRef = useRef();\n\n  const loadVideo = () => {\n    player = new window.YT.Player(\"player\", {\n      videoId: videoID,\n      playerVars: {\n        // Mute the user because if the user is unmuted,\n        // we can't autoplay the video for that user\n        // https://stackoverflow.com/questions/40685142/youtube-autoplay-not-working\n        mute: 1,\n      },\n      events: {\n        onReady: onPlayerReady,\n        onStateChange: onStateChange,\n      },\n    });\n  };\n\n  const join = (data) => {\n    setVideoID(data.videoID);\n  };\n\n  useEffect(() => {\n    props.socket.addEventListener(\"message\", (event) => {\n      let data = JSON.parse(event.data);\n      if (data.event === \"sync\") updateVideo(data);\n      if (data.event === \"join\") {\n        join(data);\n\n        // On join, ensure that we go to the correct time\n        // in the video\n        // TODO this logic may be wrong\n        if (data.latestEvent != null) {\n          setInitialVideoState({\n            currentTime: data.latestEvent.currentTime,\n            shouldPause: data.latestEvent.action === \"pause\",\n            timestamp: data.latestEvent.timestamp,\n          });\n        }\n      }\n    });\n    if (videoID !== null) {\n      if (!window.YT) {\n        const tag = document.createElement(\"script\");\n        tag.src = \"https://www.youtube.com/iframe_api\";\n\n        window.onYouTubeIframeAPIReady = loadVideo;\n\n        const firstScriptTag = document.getElementsByTagName(\"script\")[0];\n        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      } else loadVideo();\n    }\n  });\n\n  const updateVideo = (data) => {\n    let videoStatus = player.getPlayerState();\n\n    if (\n      data.action === \"currenttime\" &&\n      (videoStatus === 2 || videoStatus === -1)\n    ) {\n      const updatedCurrentTime =\n        data.currentTime + (Date.now() - data.timestamp) / 1000;\n      updateTimeRef.current = {\n        currentTime: data.currentTime,\n        timestamp: data.timestamp,\n      };\n\n      playVideo();\n      // seekTo(updatedCurrentTime, true);\n    } else if (data.action === \"pause\" && videoStatus !== 2) pauseVideo();\n  };\n\n  const onPlayerReady = (event) => {\n    if (initialVideoState.timestamp === 0) {\n      // Implies we are first user to join\n      event.target.playVideo();\n      updateTimeRef.current = {\n        timestamp: Date.now(),\n        currentTime:\n          event.target.getCurrentTime != null\n            ? event.target.getCurrentTime()\n            : 0,\n      };\n      return;\n    }\n\n    // Update time ref so that on play video state change\n    // seekTo will get triggered\n    updateTimeRef.current = {\n      timestamp: initialVideoState.timestamp,\n      currentTime: initialVideoState.currentTime,\n    };\n    event.target.playVideo();\n    if (initialVideoState.shouldPause) {\n      event.target.pauseVideo();\n    }\n  };\n\n  const onStateChange = (event) => changeState(event.data);\n  const sync = () => props.socket.send(currentStatus());\n  const seekTo = (second) => player.seekTo(second, true);\n  const pauseVideo = () => player.pauseVideo();\n\n  const playVideo = () => player.playVideo();\n  const syncPause = () => {\n    const timestamp = Date.now();\n    let currTime = player.getCurrentTime();\n    updateTimeRef.current = { timestamp: timestamp, currentTime: currTime };\n\n    props.socket.send(\n      JSON.stringify({\n        event: \"sync\",\n        action: \"pause\",\n        currentTime: currTime,\n        timestamp: timestamp,\n      })\n    );\n  };\n\n  const currentStatus = () => {\n    let currTime = player.getCurrentTime();\n    if (updateTimeRef.current != null) {\n      const timeDiff = (Date.now() - updateTimeRef.current.timestamp) / 1000;\n      const expectedCurrTime = updateTimeRef.current.currentTime + timeDiff;\n\n      if (Math.abs(expectedCurrTime - currTime) > 0.1) {\n        currTime = updateTimeRef.current.currentTime + timeDiff;\n        seekTo(currTime, true);\n      }\n    }\n\n    return JSON.stringify({\n      event: \"sync\",\n      action: \"currenttime\",\n      videoID: videoID,\n      currentTime: currTime,\n      timestamp: Date.now(),\n    });\n  };\n\n  const changeState = (triggered) => {\n    if (triggered === 1) sync();\n    else if (triggered === 2) syncPause();\n  };\n\n  return (\n    <div className=\"video\">\n      <div id=\"player\">\n        <h3>Loading...</h3>\n      </div>\n    </div>\n  );\n};\n\nexport default Video;\n","import React from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nconst CreateSession = (props) => {\n  const history = useHistory();\n\n  const { sessionID, videoUrl } = useParams();\n\n  const handleSubmit = () => {\n    const decodedVideoUrl = decodeURIComponent(videoUrl);\n    var videoID = youtubeParser(decodedVideoUrl);\n    if (!videoID) {\n      return;\n    }\n    props.session(videoID, sessionID, true);\n    history.push(\"/watch/leader\");\n  };\n\n  const youtubeParser = (url) => {\n    var regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    var match = url.match(regExp);\n    return match && match[7].length === 11 ? match[7] : false;\n  };\n\n  return <div>{handleSubmit()}</div>;\n};\n\nexport default CreateSession;\n","import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\nimport Video from \"../video/Video\";\n\nconst Session = (props) => {\n  const history = useHistory();\n  const isHttps = window.location.protocol.startsWith(\"https:\");\n  const url = `${isHttps ? \"wss\" : \"ws\"}://${\n    window.location.hostname\n  }:${8000}/`;\n  const socket = new WebSocket(url);\n  let sessID = props.sessionID;\n\n  let { sessionID } = useParams();\n  if (!sessID) {\n    sessID = sessionID;\n  }\n\n  useEffect(() => {\n    socket.onopen = () => {\n      socket.send(\n        JSON.stringify({\n          event: \"session\",\n          action: props.action,\n          sessionID: sessID,\n          videoID: props.videoID,\n        })\n      );\n    };\n  });\n  if (sessionID === \"leader\" && !props.leader) {\n    history.push(\"/\");\n  }\n  return (\n    <Video\n      videoID={props.videoID}\n      leader={props.leader}\n      sessionID={sessID}\n      socket={socket}\n    />\n  );\n};\n\nexport default Session;\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport CreateSession from \"./components/session/CreateSession\";\nimport Session from \"./components/session/Session\";\n\nfunction App() {\n  const [leader, setLeader] = useState(false);\n  const [sessionID, setSessionID] = useState(null);\n  const [videoID, setVideoID] = useState(null);\n  const [action, setAction] = useState(\"join\");\n\n  const createSession = (vidID, session, leaderbool) => {\n    setVideoID(vidID);\n    setSessionID(session);\n    setLeader(leaderbool);\n    setAction(\"create\");\n  };\n  return (\n    <Router>\n      <div className=\"skewed\"></div>\n      <div className=\"container\">\n        <main className=\"content\">\n          <Switch>\n            <Route\n              path=\"/start/:sessionID/:videoUrl\"\n              render={() => <CreateSession session={createSession} />}\n            />\n            <Route\n              path=\"/watch/:sessionID\"\n              render={() => (\n                <Session\n                  leader={leader}\n                  sessionID={sessionID}\n                  videoID={videoID}\n                  action={action}\n                />\n              )}\n            />\n          </Switch>\n        </main>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}