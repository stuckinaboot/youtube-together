{"version":3,"sources":["components/video/Video.js","components/session/CreateSession.js","components/session/Session.js","App.js","serviceWorker.js","index.js"],"names":["player","CreateSession","props","history","useHistory","useParams","sessionID","videoUrl","youtubeParser","url","match","length","decodedVideoUrl","decodeURIComponent","videoID","session","push","handleSubmit","Video","useState","setVideoID","currentTime","shouldPause","timestamp","initialVideoState","setInitialVideoState","updateTimeRef","useRef","React","leader","modalIsOpen","setIsOpen","loadVideo","window","YT","Player","videoId","playerVars","mute","events","onReady","onPlayerReady","onStateChange","useEffect","socket","addEventListener","event","data","JSON","parse","updateVideo","join","latestEvent","action","tag","document","createElement","src","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","getPlayerState","videoStatus","pauseVideo","current","playVideo","target","changeState","currentStatus","second","currTime","getCurrentTime","timeDiff","Date","now","expectedCurrTime","Math","abs","seekTo","stringify","triggered","send","syncPause","className","id","isOpen","contentLabel","style","textAlign","marginTop","marginBottom","height","overflow","display","justifyContent","alignItems","fontFamily","leaderName","Session","isHttps","location","protocol","startsWith","hostname","WebSocket","sessID","onopen","App","setLeader","setSessionID","setAction","createSession","vidID","leaderbool","path","render","Boolean","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dab63f4d.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./video.scss\";\nimport Modal from \"react-modal\";\n\nvar player;\nconst Video = (props) => {\n  const [videoID, setVideoID] = useState(props.videoID);\n  const [initialVideoState, setInitialVideoState] = useState({\n    currentTime: 0,\n    shouldPause: false,\n    timestamp: 0,\n  });\n  const updateTimeRef = useRef();\n\n  // Show modal only if not leader\n  const [modalIsOpen, setIsOpen] = React.useState(!props.leader);\n\n  const loadVideo = () => {\n    if (player != null) {\n      // Ensure we only load player once\n      return;\n    }\n    player = new window.YT.Player(\"player\", {\n      videoId: videoID,\n      playerVars: {\n        // Mute non-leader users on the assumption that the leader\n        // will be play able to autoplay + have sound (and if not it\n        // should still be ok as sync will still work after leader starts\n        // playing)\n        // https://stackoverflow.com/questions/50495493/youtube-iframe-api-doesnt-autoplay\n        // https://stackoverflow.com/questions/40685142/youtube-autoplay-not-working\n        mute: props.leader ? 0 : 1,\n      },\n      events: {\n        onReady: onPlayerReady,\n        onStateChange: onStateChange,\n      },\n    });\n  };\n\n  const join = (data) => {\n    setVideoID(data.videoID);\n  };\n\n  useEffect(() => {\n    props.socket.addEventListener(\"message\", (event) => {\n      let data = JSON.parse(event.data);\n      if (data.event === \"sync\") updateVideo(data);\n      if (data.event === \"join\") {\n        join(data);\n\n        // On join, ensure that we go to the correct time\n        // in the video\n        // TODO this logic may be wrong\n        if (data.latestEvent != null) {\n          setInitialVideoState({\n            currentTime: data.latestEvent.currentTime,\n            shouldPause: data.latestEvent.action === \"pause\",\n            timestamp: data.latestEvent.timestamp,\n          });\n          if (modalIsOpen) {\n            setIsOpen(false);\n          }\n        }\n      }\n    });\n\n    if (videoID !== null) {\n      if (!window.YT) {\n        const tag = document.createElement(\"script\");\n        tag.src = \"https://www.youtube.com/iframe_api\";\n\n        window.onYouTubeIframeAPIReady = loadVideo;\n\n        const firstScriptTag = document.getElementsByTagName(\"script\")[0];\n        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      } else loadVideo();\n    }\n  });\n\n  const updateVideo = (data) => {\n    if (modalIsOpen) {\n      setIsOpen(false);\n    }\n    if (player == null || player.getPlayerState == null) {\n      // the above should not be null by this point but if it is return\n      // as the code will crash below\n      return;\n    }\n    let videoStatus = player.getPlayerState();\n\n    if (\n      data.action === \"currenttime\" &&\n      (videoStatus === 2 || videoStatus === -1)\n    ) {\n      updateTimeRef.current = {\n        currentTime: data.currentTime,\n        timestamp: data.timestamp,\n      };\n\n      playVideo();\n    } else if (data.action === \"pause\" && videoStatus !== 2) pauseVideo();\n  };\n\n  const onPlayerReady = (event) => {\n    if (initialVideoState.timestamp === 0) {\n      // Implies we are first user to join\n      event.target.playVideo();\n      event.target.pauseVideo();\n      return;\n    }\n\n    // Update time ref so that on play video state change\n    // seekTo will get triggered\n    updateTimeRef.current = {\n      timestamp: initialVideoState.timestamp,\n      currentTime: initialVideoState.currentTime,\n    };\n    event.target.playVideo();\n    if (initialVideoState.shouldPause) {\n      event.target.pauseVideo();\n    }\n  };\n\n  const onStateChange = (event) => changeState(event.data);\n  const sync = () => props.socket.send(currentStatus());\n  const seekTo = (second) => player.seekTo(second, true);\n  const pauseVideo = () => player.pauseVideo();\n\n  const playVideo = () => player.playVideo();\n  const syncPause = () => {\n    const timestamp = Date.now();\n    let currTime = player.getCurrentTime();\n    updateTimeRef.current = null;\n\n    props.socket.send(\n      JSON.stringify({\n        event: \"sync\",\n        action: \"pause\",\n        currentTime: currTime,\n        timestamp: timestamp,\n      })\n    );\n  };\n\n  const currentStatus = () => {\n    let currTime = player.getCurrentTime();\n    if (updateTimeRef.current != null) {\n      const timeDiff = (Date.now() - updateTimeRef.current.timestamp) / 1000;\n      const expectedCurrTime = updateTimeRef.current.currentTime + timeDiff;\n\n      if (Math.abs(expectedCurrTime - currTime) > 0.1) {\n        currTime = updateTimeRef.current.currentTime + timeDiff;\n        seekTo(currTime, true);\n      }\n    }\n\n    return JSON.stringify({\n      event: \"sync\",\n      action: \"currenttime\",\n      videoID: videoID,\n      currentTime: currTime,\n      timestamp: Date.now(),\n    });\n  };\n\n  const changeState = (triggered) => {\n    if (triggered === 1) sync();\n    else if (triggered === 2) syncPause();\n  };\n\n  return (\n    <div className=\"video\">\n      <>\n        <div id=\"player\">\n          <h3>Loading...</h3>\n        </div>\n        <Modal isOpen={modalIsOpen} contentLabel=\"Example Modal\">\n          <div\n            style={{\n              textAlign: \"center\",\n              marginTop: \"auto\",\n              marginBottom: \"auto\",\n              height: \"100%\",\n              overflow: \"hidden\",\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <h3 style={{ fontFamily: \"Lato, sans-serif\" }}>\n              Waiting for {props.leaderName} to start video\n            </h3>\n          </div>\n        </Modal>\n      </>\n    </div>\n  );\n};\n\nexport default Video;\n","import React from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nconst CreateSession = (props) => {\n  const history = useHistory();\n\n  const { sessionID, videoUrl } = useParams();\n\n  const handleSubmit = () => {\n    const decodedVideoUrl = decodeURIComponent(videoUrl);\n    var videoID = youtubeParser(decodedVideoUrl);\n    if (!videoID) {\n      return;\n    }\n    props.session(videoID, sessionID, true);\n    history.push(\"/watch/leader\");\n  };\n\n  const youtubeParser = (url) => {\n    var regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    var match = url.match(regExp);\n    return match && match[7].length === 11 ? match[7] : false;\n  };\n\n  return <div>{handleSubmit()}</div>;\n};\n\nexport default CreateSession;\n","import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\nimport Video from \"../video/Video\";\n\nconst Session = (props) => {\n  const history = useHistory();\n  const isHttps = window.location.protocol.startsWith(\"https:\");\n  const url = `${isHttps ? \"wss\" : \"ws\"}://${\n    window.location.hostname\n  }:${8000}/`;\n  const socket = new WebSocket(url);\n  let sessID = props.sessionID;\n\n  let { sessionID, leaderName } = useParams();\n\n  if (!sessID) {\n    sessID = sessionID;\n  }\n\n  useEffect(() => {\n    socket.onopen = () => {\n      socket.send(\n        JSON.stringify({\n          event: \"session\",\n          action: props.action,\n          sessionID: sessID,\n          videoID: props.videoID,\n        })\n      );\n    };\n  });\n  if (sessionID === \"leader\" && !props.leader) {\n    history.push(\"/\");\n  }\n  return (\n    <Video\n      videoID={props.videoID}\n      leader={props.leader}\n      leaderName={leaderName || \"leader\"}\n      sessionID={sessID}\n      socket={socket}\n    />\n  );\n};\n\nexport default Session;\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport CreateSession from \"./components/session/CreateSession\";\nimport Session from \"./components/session/Session\";\n\nfunction App() {\n  const [leader, setLeader] = useState(false);\n  const [sessionID, setSessionID] = useState(null);\n  const [videoID, setVideoID] = useState(null);\n  const [action, setAction] = useState(\"join\");\n\n  const createSession = (vidID, session, leaderbool) => {\n    setVideoID(vidID);\n    setSessionID(session);\n    setLeader(leaderbool);\n    setAction(\"create\");\n  };\n  return (\n    <Router>\n      <div className=\"skewed\"></div>\n      <div className=\"container\">\n        <main className=\"content\">\n          <Switch>\n            <Route\n              path=\"/start/:sessionID/:videoUrl\"\n              render={() => <CreateSession session={createSession} />}\n            />\n            <Route\n              path=\"/watch/:sessionID/:leaderName?\"\n              render={() => (\n                <Session\n                  leader={leader}\n                  sessionID={sessionID}\n                  videoID={videoID}\n                  action={action}\n                />\n              )}\n            />\n          </Switch>\n        </main>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}